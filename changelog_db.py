"""
Changelog database interface for the changelog-llm project.
This module provides a simplified interface for interacting with the changelog database.
"""
import logging
import os
from db_schema import init_db, get_db_connection
import db_utils

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class ChangelogDB:
    """
    A class to interact with the changelog database.
    This provides a higher-level interface for common changelog operations.
    """
    
    def __init__(self, db_path=None):
        """
        Initialize the ChangelogDB.
        
        Args:
            db_path (str, optional): Path to the database file
        """
        if db_path:
            os.environ["CHANGELOG_DB_PATH"] = db_path
        
        # Initialize the database if needed
        init_db()
    
    def create_run(self, model_name, base_model, hyperparameters, git_commit=None):
        """
        Create a new training run.
        
        Args:
            model_name (str): Name of the model being trained
            base_model (str): Name of the base model being fine-tuned
            hyperparameters (dict): Training hyperparameters
            git_commit (str, optional): Git commit hash
        
        Returns:
            int: ID of the new training run
        """
        return db_utils.create_training_run(model_name, base_model, hyperparameters, git_commit)
    
    def update_run_status(self, run_id, status, metrics=None):
        """
        Update the status and metrics of a training run.
        
        Args:
            run_id (int): ID of the training run
            status (str): New status ('running', 'completed', 'failed')
            metrics (dict, optional): Training metrics to save
        
        Returns:
            bool: True if update was successful
        """
        return db_utils.update_training_run_status(run_id, status, metrics)
    
    def add_examples(self, run_id, examples):
        """
        Add training examples to a training run.
        
        Args:
            run_id (int): ID of the training run
            examples (list): List of example dictionaries with 'input', 'target', 
                            and optional 'type' and 'metadata'
        
        Returns:
            int: Number of examples added
        """
        return db_utils.add_training_examples(run_id, examples)
    
    def add_output(self, run_id, input_text, output_text, metadata=None):
        """
        Add a model output to a training run.
        
        Args:
            run_id (int): ID of the training run
            input_text (str): Input prompt provided to the model
            output_text (str): Output generated by the model
            metadata (dict, optional): Additional metadata about the output
        
        Returns:
            int: ID of the new output entry
        """
        return db_utils.add_model_output(run_id, input_text, output_text, metadata)
    
    def get_run(self, run_id):
        """
        Get details of a specific training run.
        
        Args:
            run_id (int): ID of the training run
        
        Returns:
            dict: Training run details or None if not found
        """
        return db_utils.get_training_run(run_id)
    
    def get_all_runs(self):
        """
        Get a list of all training runs.
        
        Returns:
            list: List of training run summaries
        """
        return db_utils.get_all_training_runs()
    
    def get_examples(self, run_id=None, example_type=None, limit=None):
        """
        Get training examples, optionally filtered by run_id and type.
        
        Args:
            run_id (int, optional): Filter by training run ID
            example_type (str, optional): Filter by example type
            limit (int, optional): Limit the number of examples returned
        
        Returns:
            list: List of training examples
        """
        return db_utils.get_training_examples(run_id, example_type, limit)

    def export_to_json(self, output_path="changelog_export.json"):
        """
        Export the entire database to a JSON file similar to the original changelog.json format.
        
        Args:
            output_path (str): Path to save the JSON file
        
        Returns:
            bool: True if export was successful
        """
        import json
        
        logger.info(f"Exporting database to JSON file: {output_path}")
        runs = self.get_all_runs()
        
        export_data = {}
        for run_summary in runs:
            run_id = run_summary['id']
            run_data = self.get_run(run_id)
            
            if run_data:
                # Format the data to match the original JSON structure
                export_entry = {
                    'model_name': run_data['model_name'],
                    'base_model': run_data['base_model'],
                    'status': run_data['status'],
                    'start_time': run_data['start_time'],
                    'end_time': run_data['end_time'],
                    'hyperparameters': run_data['hyperparameters'],
                    'metrics': run_data['metrics'],
                    'git_commit': run_data['git_commit'],
                    'examples': [],
                    'outputs': []
                }
                
                # Format examples
                for example in run_data['examples']:
                    export_example = {
                        'input': example['input_text'],
                        'target': example['target_text'],
                        'type': example['example_type']
                    }
                    if example['metadata']:
                        export_example['metadata'] = example['metadata']
                    export_entry['examples'].append(export_example)
                
                # Format outputs
                for output in run_data['outputs']:
                    export_output = {
                        'input': output['input_text'],
                        'output': output['output_text'],
                        'timestamp': output['timestamp']
                    }
                    if output['metadata']:
                        export_output['metadata'] = output['metadata']
                    export_entry['outputs'].append(export_output)
                
                export_data[str(run_id)] = export_entry
        
        try:
            with open(output_path, 'w') as f:
                json.dump(export_data, f, indent=2)
            logger.info(f"Successfully exported database to {output_path}")
            return True
        except Exception as e:
            logger.error(f"Error exporting database to JSON: {e}")
            return False
